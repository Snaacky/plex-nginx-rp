pid /run/nginx.pid;

# Set user nginx should run under
user www-data;

# You must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_cpu_affinity auto;
worker_priority -10;
worker_processes auto;

# Number of file descriptors used for nginx
# The limit for the maximum FDs on the server is usually set by the OS
# If you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 520000;

# Reduces timer resolution in worker processes, thus reducing the number of gettimeofday() system calls made.
timer_resolution 100ms;

# Enables routing of QUIC packets using eBPF. When enabled, this allows to support QUIC connection migration. The directive is only supported on Linux 5.7+.
quic_bpf on;

# Only log critical errors
error_log /var/log/nginx/error.log crit;

events {
	# Determines how much clients will be served per worker
	# max clients = worker_connections * worker_processes
	# max clients is also limited by the number of socket connections available on the system (~64k)
	worker_connections 100000;

	# There is no need to enable accept_mutex on systems that support the EPOLLEXCLUSIVE flag (1.11.3) or when using reuseport.
	accept_mutex off;

	# Optimized to serve many clients with each thread, essential for linux
	use epoll;

	# Accept as many connections as possible
	multi_accept on;
}

http {
	# If a large number of server names are defined, or unusually long server names are defined, tuning may become necessary
	map_hash_bucket_size 128;
	map_hash_max_size 4096;
	server_name_in_redirect off;
	server_names_hash_bucket_size 128;
	server_names_hash_max_size 2048;
	variables_hash_max_size 2048;


	# Cache informations about FDs, frequently accessed files
	# Can boost performance, but you need to test those values
	open_file_cache max=50000 inactive=60s;
	open_file_cache_errors off;
	open_file_cache_min_uses 2;
	open_file_cache_valid 120s;
	open_log_file_cache max=10000 inactive=30s min_uses=2;

	# Enables multi-threading
	aio threads;
	aio_write on;

	# To boost I/O on HDD we can disable access logs
	access_log off;
	log_not_found off;

	# https://github.com/GetPageSpeed/ngx_security_headers
	hide_server_tokens on;
	ignore_invalid_headers on;
	security_headers off;

	# Combining kTLS and sendfile() means data is encrypted directly in kernel space, before being passed to the network stack for transmission
	sendfile on;

	# Send headers in one piece, it is better than sending them one by one
	tcp_nopush on;

	# Don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;

	# Allow the server to close connection on non responding client, this will free up memory
	reset_timedout_connection on;

	# Timeouts really improve nginx performance substantially. The keepalive connections reduce cpu and network overhead required for opening and closing connections
	client_body_timeout 30s;
	client_header_timeout 30s;
	keepalive_disable msie6;
	keepalive_requests 50000;
	keepalive_timeout 10s;
	lingering_time 20s;
	lingering_timeout 5s;
	reset_timedout_connection on;
	send_timeout 60s;

	# Buffers play a big role in the optimization of nginx performance. The following are the variables that need to be adjusted for optimum performance
	client_body_buffer_size 64k;
	client_header_buffer_size 64k;
	client_max_body_size 1024m;
	connection_pool_size 512;
	directio 4m;
	directio_alignment 512;
	large_client_header_buffers 8 64k;
	output_buffers 2 32k;
	postpone_output 1460;
	request_pool_size 32k;

	# MIME
	default_type application/octet-stream;
	include mime.types;

	# Load configs
	include /etc/nginx/sites-enabled/*;
}